var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SortMark","category":"page"},{"location":"#SortMark","page":"Home","title":"SortMark","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SortMark.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SortMark]","category":"page"},{"location":"#SortMark.compute!-Tuple{DataFrames.DataFrame}","page":"Home","title":"SortMark.compute!","text":"compute!(df::DataFrame; verbose=true, fail_fast=true)\n\nTest and run benchmarks for every row in df.\n\nBenchmark results are saved in df.data.\n\n\n\n\n\n","category":"method"},{"location":"#SortMark.make_df","page":"Home","title":"SortMark.make_df","text":"make_df(algs = [MergeSort, QuickSort]; ...)\n\nMake a dataframe where each row is a sorting task specified by the cartesian product of keyword arguments.\n\nArguments\n\nalgs::AbstractVector{<:Base.Sort.Algorithm} = [MergeSort, QuickSort]:   sorting algorithms to test\nunstable::AbstractVector{<:Base.Sort.Algorithm} = [QuickSort]:   which of the algorithms are allowed to be unstable\n\nAxes of the cartesian product\n\nTypes::AbstractVector{<:Type} = SortMark.BitTypes:   element type\nlens::AbstractVector{<:Integer} = SortMark.lengths():   number of elements to be sorted\norders::AbstractVector{<:Ordering} = SortMark.orders:   orders to sort by\nsources::AbstractDict{<:Any, <:Function} = SortMark.sources:   generation procedures to create input data\n\nBenchmarking time\n\nseconds::Union{Real, Nothing} = .005:   maximum benchmarking time for each row. Compute sum(df.seconds) for an estimated   benchmarking runtime\nsamples::Union{Nothing, Integer} = nothing:   maximum number of samples for each row. Compute sum(df.seconds) for an estimated   benchmarking runtime\n\nSetting seconds or samples to nothing removes that limit.\n\n\n\n\n\n","category":"function"},{"location":"#SortMark.stat!","page":"Home","title":"SortMark.stat!","text":"function stat!(df, a=1, b=2)\n\nCompute comparative stats for the ath and bth algorithm tested in df.\n\nReturns the 95% confidence interval for the ratio of runtimes a/b for each row.\n\n\n\n\n\n","category":"function"}]
}
